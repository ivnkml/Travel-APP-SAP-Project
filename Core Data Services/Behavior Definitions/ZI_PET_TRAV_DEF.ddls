managed; // Implementierung erfolgt in der zugeordneten ABAP-Klasse (Business Object Handler)
with draft; // Entwurfsmodus ermöglicht das Zwischenspeichern und spätere Übernehmen von Änderungen

// Verhaltensdefinition für das Business Object "Travel"
define behavior for ZI_PET_TRAV_DEF alias Travel
implementation in class zbp_i_pet_travel unique
persistent table zpet_travdat
draft table zpet_dtrav
lock master total etag LastChangedAt
authorization master ( instance )
etag master LocalLastChangedAt
{
  create;
  update;
  delete;

  association _Booking { create; with draft; }
  // Verknüpfung zu Buchungen, ermöglicht Erzeugung im Entwurfsmodus

  // Felder mit besonderen Eigenschaften (Nummerierung, nur-lesend, Pflichtfelder)
  field ( numbering : managed, readonly ) TravelUUID;  // Automatische Nummerierung, nur lesbar
  field ( readonly ) TravelID, TotalPrice, TravelStatus; // Systemgenerierte bzw. nur-lesende Felder
  field ( readonly ) LastChangedAt, LastChangedBy, CreatedAt, CreatedBy, LocalLastChangeDat;
  field ( mandatory ) AgencyID, CustomerID; // Muss beim Anlegen angegeben werden

  // Benutzerdefinierte Aktionen auf Instanzebene
  action ( features : instance ) acceptTravel result [1] $self; // Reise akzeptieren
  action ( features : instance ) rejectTravel result [1] $self; // Reise ablehnen
  internal action recalcTotalPrice; // Interne Aktion zur Preisneuberechnung

  // Determinations – automatische Logik bei bestimmten Events
  determination setInitialStatus on modify { create; } // Status bei Neuerstellung setzen
  determination calculateTotalPrice on modify { field BookingFee, CurrencyCode; } // Preis berechnen bei Änderungen
  determination calculateTravelID on save { create; } // TravelID beim Speichern vergeben

  // Validierungen – Prüfung von Pflichtfeldern und Konsistenz
  validation validateAgency   on save { field AgencyID; create; }
  validation validateCustomer on save { field CustomerID; create; }
  validation validateDates    on save { field BeginDate, EndDate; create; }

  // Validierungen und Logik für Entwurfsaktionen
  draft determine action Prepare {
        validation validateAgency;
        validation validateCustomer;
        validation validateDates;
  }

  // Mapping zwischen CDS-Feldern und DB-Tabellenspalten
  mapping for zpet_travdat
  {
    TravelUUID         = travel_uuid;
    TravelID           = travel_id;
    AgencyID           = agency_id;
    CustomerID         = customer_id;
    BeginDate          = begin_date;
    EndDate            = end_date;
    BookingFee         = booking_fee;
    TotalPrice         = total_price;
    CurrencyCode       = currency_code;
    Description        = description;
    TravelStatus       = overall_status;
    CreatedBy          = created_by;
    CreatedAt          = created_at;
    LastChangedBy      = last_changed_by;
    LastChangedAt      = last_changed_at;
    LocalLastChangedAt = local_last_changed_at;
  }
}

// Verhaltensdefinition für das zugehörige Objekt "Booking"
define behavior for ZI_PET_BOOK_DEF alias Booking
implementation in class zbp_i_pet_booking unique
persistent table zpet_bookdat
draft table zpet_dbook
lock dependent by _Travel
authorization dependent by _Travel
etag master LocalLastChangeDat
{
  association _Travel { with draft; } // Beziehung zur Reise im Entwurfsmodus

  update;
  delete;

  field ( numbering : managed, readonly ) BookingUUID;
  field ( readonly ) TravelUUID, BookingId;
  field ( readonly ) LastChangedBy, CreatedBy, LocalLastChangeDat;

  // Automatische Generierung von IDs und Preisen
  determination calculateBookingID  on modify { create; }
  determination calculateTotalPrice on modify { field FlightPrice, CurrencyCode; }

  mapping for zpet_bookdat
  {
    BookingUUID        = booking_uuid;
    TravelUUID         = travel_uuid;
    BookingID          = booking_id;
    BookingDate        = booking_date;
    CustomerID         = customer_id;
    CarrierID          = carrier_id;
    ConnectionID       = connection_id;
    FlightDate         = flight_date;
    FlightPrice        = flight_price;
    CurrencyCode       = currency_code;
    CreatedBy          = created_by;
    LastChangedBy      = last_changed_by;
    LocalLastChangedAt = local_last_changed_at;
  }
}
